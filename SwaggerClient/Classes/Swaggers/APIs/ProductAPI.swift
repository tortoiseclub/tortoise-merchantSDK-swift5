//
// ProductAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ProductAPI {
    /**
     Add a new product
     
     - parameter body: (body) Product object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addProduct(body: Product, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        addProductWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new product
     - POST /products
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example={
  "price" : 0,
  "name" : "name",
  "id" : "id",
  "updatedOn" : "2000-01-23T04:56:07.000+00:00",
  "category" : "category",
  "createdOn" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}}]
     
     - parameter body: (body) Product object that needs to be added 

     - returns: RequestBuilder<Product> 
     */
    open class func addProductWithRequestBuilder(body: Product) -> RequestBuilder<Product> {
        let path = "/products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit product details
     
     - parameter productId: (path) ID of the product to edit 
     - parameter body: (body) Product object that needs to be edited 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func editProduct(productId: String, body: Product, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        editProductWithRequestBuilder(productId: productId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Edit product details
     - PUT /products/{productId}
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     
     - parameter productId: (path) ID of the product to edit 
     - parameter body: (body) Product object that needs to be edited 

     - returns: RequestBuilder<Void> 
     */
    open class func editProductWithRequestBuilder(productId: String, body: Product) -> RequestBuilder<Void> {
        var path = "/products/{productId}"
        let productIdPreEscape = "\(productId)"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch all products
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllProducts(completion: @escaping ((_ data: [Product]?,_ error: Error?) -> Void)) {
        fetchAllProductsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch all products
     - GET /products
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example=[ {
  "price" : 0,
  "name" : "name",
  "id" : "id",
  "updatedOn" : "2000-01-23T04:56:07.000+00:00",
  "category" : "category",
  "createdOn" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}, {
  "price" : 0,
  "name" : "name",
  "id" : "id",
  "updatedOn" : "2000-01-23T04:56:07.000+00:00",
  "category" : "category",
  "createdOn" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
} ]}]

     - returns: RequestBuilder<[Product]> 
     */
    open class func fetchAllProductsWithRequestBuilder() -> RequestBuilder<[Product]> {
        let path = "/products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Product]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get product by ID
     
     - parameter productId: (path) ID of the product to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProduct(productId: String, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        getProductWithRequestBuilder(productId: productId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get product by ID
     - GET /products/{productId}
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example={
  "price" : 0,
  "name" : "name",
  "id" : "id",
  "updatedOn" : "2000-01-23T04:56:07.000+00:00",
  "category" : "category",
  "createdOn" : "2000-01-23T04:56:07.000+00:00",
  "status" : "active"
}}]
     
     - parameter productId: (path) ID of the product to fetch 

     - returns: RequestBuilder<Product> 
     */
    open class func getProductWithRequestBuilder(productId: String) -> RequestBuilder<Product> {
        var path = "/products/{productId}"
        let productIdPreEscape = "\(productId)"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
