//
// PaymentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PaymentAPI {
    /**
     Add a new payment
     
     - parameter body: (body) Payment object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addPayment(body: Payment, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addPaymentWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a new payment
     - POST /payments
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     
     - parameter body: (body) Payment object that needs to be added 

     - returns: RequestBuilder<Void> 
     */
    open class func addPaymentWithRequestBuilder(body: Payment) -> RequestBuilder<Void> {
        let path = "/payments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch all payments
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllPayments(completion: @escaping ((_ data: [Payment]?,_ error: Error?) -> Void)) {
        fetchAllPaymentsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch all payments
     - GET /payments
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example=[ {
  "mode" : "debit",
  "amount" : 6,
  "id" : "id",
  "plan" : {
    "product" : { },
    "planValue" : 0,
    "enrolledOn" : "2000-01-23T04:56:07.000+00:00",
    "totalPaidValue" : 1,
    "scheme" : { },
    "planMaturityDate" : "2000-01-23",
    "nextInstalmentDate" : "2000-01-23",
    "instalmentValue" : 6,
    "completedInstalments" : 5,
    "totalExpectedRedemptionValue" : 5,
    "currentCancellationValue" : 7,
    "lastInstalmentPaidOn" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "currentRedemptionValue" : 2,
    "customer" : { }
  },
  "instalmentId" : 0,
  "createdOn" : "2000-01-23T04:56:07.000+00:00",
  "status" : "successful"
}, {
  "mode" : "debit",
  "amount" : 6,
  "id" : "id",
  "plan" : {
    "product" : { },
    "planValue" : 0,
    "enrolledOn" : "2000-01-23T04:56:07.000+00:00",
    "totalPaidValue" : 1,
    "scheme" : { },
    "planMaturityDate" : "2000-01-23",
    "nextInstalmentDate" : "2000-01-23",
    "instalmentValue" : 6,
    "completedInstalments" : 5,
    "totalExpectedRedemptionValue" : 5,
    "currentCancellationValue" : 7,
    "lastInstalmentPaidOn" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "currentRedemptionValue" : 2,
    "customer" : { }
  },
  "instalmentId" : 0,
  "createdOn" : "2000-01-23T04:56:07.000+00:00",
  "status" : "successful"
} ]}]

     - returns: RequestBuilder<[Payment]> 
     */
    open class func fetchAllPaymentsWithRequestBuilder() -> RequestBuilder<[Payment]> {
        let path = "/payments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Payment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get payment by ID
     
     - parameter paymentId: (path) ID of the payment to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPayment(paymentId: String, completion: @escaping ((_ data: Payment?,_ error: Error?) -> Void)) {
        getPaymentWithRequestBuilder(paymentId: paymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get payment by ID
     - GET /payments/{paymentId}
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example={
  "mode" : "debit",
  "amount" : 6,
  "id" : "id",
  "plan" : {
    "product" : { },
    "planValue" : 0,
    "enrolledOn" : "2000-01-23T04:56:07.000+00:00",
    "totalPaidValue" : 1,
    "scheme" : { },
    "planMaturityDate" : "2000-01-23",
    "nextInstalmentDate" : "2000-01-23",
    "instalmentValue" : 6,
    "completedInstalments" : 5,
    "totalExpectedRedemptionValue" : 5,
    "currentCancellationValue" : 7,
    "lastInstalmentPaidOn" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "currentRedemptionValue" : 2,
    "customer" : { }
  },
  "instalmentId" : 0,
  "createdOn" : "2000-01-23T04:56:07.000+00:00",
  "status" : "successful"
}}]
     
     - parameter paymentId: (path) ID of the payment to fetch 

     - returns: RequestBuilder<Payment> 
     */
    open class func getPaymentWithRequestBuilder(paymentId: String) -> RequestBuilder<Payment> {
        var path = "/payments/{paymentId}"
        let paymentIdPreEscape = "\(paymentId)"
        let paymentIdPostEscape = paymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{paymentId}", with: paymentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Payment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
