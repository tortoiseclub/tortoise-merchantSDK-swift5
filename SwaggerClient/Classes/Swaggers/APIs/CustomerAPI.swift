//
// CustomerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CustomerAPI {
    /**
     Add a new customer
     
     - parameter body: (body) Customer object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addCustomer(body: Customer, completion: @escaping ((_ data: Customer?,_ error: Error?) -> Void)) {
        addCustomerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new customer
     - POST /customers
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "kycStatus" : "pending",
  "gender" : "male",
  "countryCode" : "countryCode",
  "mobile" : "mobile",
  "id" : "id",
  "email" : "email",
  "age" : 0
}}]
     
     - parameter body: (body) Customer object that needs to be added 

     - returns: RequestBuilder<Customer> 
     */
    open class func addCustomerWithRequestBuilder(body: Customer) -> RequestBuilder<Customer> {
        let path = "/customers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Customer>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit customer details
     
     - parameter customerId: (path) ID of customer to edit 
     - parameter body: (body) Customer object that needs to be edited 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func editCustomer(customerId: String, body: Customer, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        editCustomerWithRequestBuilder(customerId: customerId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Edit customer details
     - PUT /customers/{customerId}
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     
     - parameter customerId: (path) ID of customer to edit 
     - parameter body: (body) Customer object that needs to be edited 

     - returns: RequestBuilder<Void> 
     */
    open class func editCustomerWithRequestBuilder(customerId: String, body: Customer) -> RequestBuilder<Void> {
        var path = "/customers/{customerId}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerId}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch all customers
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllCustomers(completion: @escaping ((_ data: [Customer]?,_ error: Error?) -> Void)) {
        fetchAllCustomersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch all customers
     - GET /customers
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example=[ {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "kycStatus" : "pending",
  "gender" : "male",
  "countryCode" : "countryCode",
  "mobile" : "mobile",
  "id" : "id",
  "email" : "email",
  "age" : 0
}, {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "kycStatus" : "pending",
  "gender" : "male",
  "countryCode" : "countryCode",
  "mobile" : "mobile",
  "id" : "id",
  "email" : "email",
  "age" : 0
} ]}]

     - returns: RequestBuilder<[Customer]> 
     */
    open class func fetchAllCustomersWithRequestBuilder() -> RequestBuilder<[Customer]> {
        let path = "/customers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Customer]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get customer by ID
     
     - parameter customerId: (path) ID of customer to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomer(customerId: String, completion: @escaping ((_ data: Customer?,_ error: Error?) -> Void)) {
        getCustomerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get customer by ID
     - GET /customers/{customerId}
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "kycStatus" : "pending",
  "gender" : "male",
  "countryCode" : "countryCode",
  "mobile" : "mobile",
  "id" : "id",
  "email" : "email",
  "age" : 0
}}]
     
     - parameter customerId: (path) ID of customer to get 

     - returns: RequestBuilder<Customer> 
     */
    open class func getCustomerWithRequestBuilder(customerId: String) -> RequestBuilder<Customer> {
        var path = "/customers/{customerId}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerId}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Customer>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
