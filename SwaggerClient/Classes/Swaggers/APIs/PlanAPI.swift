//
// PlanAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PlanAPI {
    /**
     Add a new plan
     
     - parameter body: (body) Plan object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addPlan(body: Plan, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addPlanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a new plan
     - POST /plans
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     
     - parameter body: (body) Plan object that needs to be added 

     - returns: RequestBuilder<Void> 
     */
    open class func addPlanWithRequestBuilder(body: Plan) -> RequestBuilder<Void> {
        let path = "/plans"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit a plan's details
     
     - parameter planId: (path) ID of the plan to edit 
     - parameter body: (body) Plan object that needs to be edited 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func editPlan(planId: String, body: Plan, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        editPlanWithRequestBuilder(planId: planId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Edit a plan's details
     - PUT /plans/{planId}
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     
     - parameter planId: (path) ID of the plan to edit 
     - parameter body: (body) Plan object that needs to be edited 

     - returns: RequestBuilder<Void> 
     */
    open class func editPlanWithRequestBuilder(planId: String, body: Plan) -> RequestBuilder<Void> {
        var path = "/plans/{planId}"
        let planIdPreEscape = "\(planId)"
        let planIdPostEscape = planIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planId}", with: planIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch all plans
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchAllPlans(completion: @escaping ((_ data: [Plan]?,_ error: Error?) -> Void)) {
        fetchAllPlansWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch all plans
     - GET /plans
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example=[ {
  "product" : { },
  "planValue" : 0,
  "enrolledOn" : "2000-01-23T04:56:07.000+00:00",
  "totalPaidValue" : 1,
  "scheme" : { },
  "planMaturityDate" : "2000-01-23",
  "nextInstalmentDate" : "2000-01-23",
  "instalmentValue" : 6,
  "completedInstalments" : 5,
  "totalExpectedRedemptionValue" : 5,
  "currentCancellationValue" : 7,
  "lastInstalmentPaidOn" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "currentRedemptionValue" : 2,
  "customer" : { }
}, {
  "product" : { },
  "planValue" : 0,
  "enrolledOn" : "2000-01-23T04:56:07.000+00:00",
  "totalPaidValue" : 1,
  "scheme" : { },
  "planMaturityDate" : "2000-01-23",
  "nextInstalmentDate" : "2000-01-23",
  "instalmentValue" : 6,
  "completedInstalments" : 5,
  "totalExpectedRedemptionValue" : 5,
  "currentCancellationValue" : 7,
  "lastInstalmentPaidOn" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "currentRedemptionValue" : 2,
  "customer" : { }
} ]}]

     - returns: RequestBuilder<[Plan]> 
     */
    open class func fetchAllPlansWithRequestBuilder() -> RequestBuilder<[Plan]> {
        let path = "/plans"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Plan]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a plan by ID
     
     - parameter planId: (path) ID of the plan to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlan(planId: String, completion: @escaping ((_ data: Plan?,_ error: Error?) -> Void)) {
        getPlanWithRequestBuilder(planId: planId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a plan by ID
     - GET /plans/{planId}
     - API Key:
       - type: apiKey X-TORTOISE-KEY 
       - name: tortoise_merchant_apiKey
     - API Key:
       - type: apiKey X-TORTOISE-ID 
       - name: tortoise_merchant_appId
     - examples: [{contentType=application/json, example={
  "product" : { },
  "planValue" : 0,
  "enrolledOn" : "2000-01-23T04:56:07.000+00:00",
  "totalPaidValue" : 1,
  "scheme" : { },
  "planMaturityDate" : "2000-01-23",
  "nextInstalmentDate" : "2000-01-23",
  "instalmentValue" : 6,
  "completedInstalments" : 5,
  "totalExpectedRedemptionValue" : 5,
  "currentCancellationValue" : 7,
  "lastInstalmentPaidOn" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "currentRedemptionValue" : 2,
  "customer" : { }
}}]
     
     - parameter planId: (path) ID of the plan to fetch 

     - returns: RequestBuilder<Plan> 
     */
    open class func getPlanWithRequestBuilder(planId: String) -> RequestBuilder<Plan> {
        var path = "/plans/{planId}"
        let planIdPreEscape = "\(planId)"
        let planIdPostEscape = planIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planId}", with: planIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Plan>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
